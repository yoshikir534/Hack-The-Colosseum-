import math
import matplotlib.pyplot as plt


#some to most of the calculations were assisted in some way


def simulate_rocket():
    def _input_float(prompt, default):
        val = input(f"{prompt} [{default}]: ")
        if val.strip() == "":
            return float(default)
        try:
            return float(val)
        except ValueError:
            print("Invalid input, using default.")
            return float(default)

    mass = _input_float("mass (kg)", 10000)
    thrust = _input_float("Thrust (N)", 80000)
    angle = _input_float("Launch angle (degrees)", 45)
    drag_coefficient = _input_float("Drag coefficient", 0.8)
    area = _input_float("Frontal area (m^2)", 5)
    air_density = _input_float("Air density (kg/m^3)", 1.225)
    fuel_burn_rate = _input_float("Fuel burn rate (kg/s)", 0.5)
    fuel_mass = _input_float("Initial fuel mass (kg)", 3000)
    ve = _input_float("Exhaust velocity (m/s)", 3000)

    vx = 0.0  # Initialize velocity
    vy = 0.0

    # Apply initial thrust
    vx += math.cos(math.radians(angle)) * thrust / mass
    vy += math.sin(math.radians(angle)) * thrust / mass

    dt = 0.1  # time step

    x = 0.0
    y = 0.0
    x_values = [x]
    y_values = [y]

    m_prev = mass  # Initialize m_prev before the loop

    for _ in range(2000):

        if fuel_mass > 0 and mass > 0:
            fuel_burn = dt * fuel_burn_rate
            fuel_mass -= fuel_burn
            if fuel_mass < 0:
                fuel_burn += fuel_mass
                fuel_mass = 0
            m_prev = mass
            mass -= fuel_burn

            # Apply rocket thrust using Tsiolkovsky rocket equation (???)
            if m_prev > mass:
                delta_v = ve * math.log(m_prev / mass)
                vx += math.cos(math.radians(angle)) * delta_v
                vy += math.sin(math.radians(angle)) * delta_v

        speed = math.sqrt(vx**2 + vy**2)
        drag = 0.5 * air_density * speed**2 * drag_coefficient * area
        ax = -drag * vx / mass
        ay = -9.81 - (drag * vy / mass)
        vx += ax * dt
        vy += ay * dt
        y += vy * dt
        x += vx * dt

        if y < 0:
            y = 0.0
            break

        x_values.append(x)
        y_values.append(y)

    return x_values, y_values

if __name__ == "__main__":
    x_values, y_values = simulate_rocket()

    plt.figure(figsize=(8, 5))
    plt.plot(x_values, y_values, marker='*', markersize=2, linewidth=1, color='red')
    plt.xlabel('Distance')
    plt.ylabel('Altitude')
    plt.title('Rocket trajectory')
    plt.grid(False)
    plt.tight_layout()
    fig = plt.gcf()
    ax = plt.gca()
    fig.patch.set_facecolor('white')
    ax.set_facecolor('#333333')
    plt.show()
